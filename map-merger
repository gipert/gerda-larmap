#!/usr/bin/env python
#
# Author: Luigi Pertoldi - pertoldi@pd.infn.it
# Created: Sun 24 Mar 2019

import sys
import argparse


def main():
    parser = argparse.ArgumentParser(
        description='Merge two (or more) LAr probability maps.',
        usage='%(prog)s [-h] [-o outfile.root] file.root file.root [file.root ...]'
    )
    parser.add_argument('-o', '--output',
        dest='outfile', default='gerda-larmap-merged.root',
        metavar='outfile.root', help='output filename')
    parser.add_argument('file1', metavar='file.root',
        nargs=1, help='output of create-larmap program')
    parser.add_argument('file2', metavar='file.root',
        nargs='+', help=argparse.SUPPRESS)
    parser.add_argument('-c', '--check', action='store_true',
        default=False, dest='check',
        help='check ROOT files before')

    args = parser.parse_args()
    args.file = args.file1 + args.file2

    from ROOT import TFile, TH3D

    print('INFO: merging together'),
    print(' '.join(args.file))

    if args.check:
        for f in args.file:
            print 'INFO: checking file', f, '\b...\r',
            sys.stdout.flush()

            rf = TFile(f, 'read')

            if not rf:
                raise RuntimeError('Invalid input file detected')
            if not rf.Get('LAr_vertex_map'):
                raise RuntimeError("Could not find 'LAr_vertex_map' object")
            if not rf.Get('LAr_vertex_hits_map'):
                raise RuntimeError("Could not find 'LAr_vertex_hits_map' object")

        print('')
    print('INFO: adding everything together...')

    rf = TFile(str(args.file[0]), 'read')
    vertices = rf.Get('LAr_vertex_map')
    vertices_hits = rf.Get('LAr_vertex_hits_map')

    for f in args.file[1:]:
        print 'INFO: Processing file', f, '\b...\r',
        sys.stdout.flush()
        _rf = TFile(str(f), 'read')
        vertices.Add(_rf.Get('LAr_vertex_map'))
        vertices_hits.Add(_rf.Get('LAr_vertex_hits_map'))

    print('')
    print('INFO: dividing...')
    prob_map = vertices_hits.Clone('LAr_prob_map')
    prob_map.Divide(vertices)

    fout = TFile(args.outfile, 'recreate')
    fout.cd()

    vertices.Write()
    vertices_hits.Write()
    prob_map.Write()

    print 'INFO:', args.outfile, 'created.'


if __name__ == '__main__':
    main()
